;(function ($) {

	const URL_GET_ALL_PANEL_ID           = '/pcf_get_all_mondo_id',
		  URL_GET_PANEL_ID_BY_PANEL      = 'https://pubcasefinder.dbcls.jp/api/pcf_panel_get_mondo_id_match_panel_name_synonym',
		  URL_GET_PANEL_ID_BY_GENE       = 'https://pubcasefinder.dbcls.jp/api/pcf_panel_get_mondo_id_match_gene_symbol_synonym_ncbiid',
		  URL_GET_PANEL_DATA_BY_PANEL_ID = 'https://pubcasefinder.dbcls.jp/sparqlist/api/pcf_get_panel_data_by_mondo_id',
		  URL_GET_HPO_DATA_BY_PANEL_ID   = 'https://pubcasefinder.dbcls.jp/aparqlist/api/pcf_get_hpo_data_by_mondo_id',
		  URL_GET_GENE_DATA_BY_PANEL_ID  = 'https://pubcasefinder.dbcls.jp/aparqlist/api/pcf_get_gene_data_by_mondo_id',
		  URL_DOWNLOAD_ALL_PANEL         = 'https://pubcasefinder.dbcls.jp/aparqlist/api/pcf_download_all_panel',
		  URL_DOWNLOAD_PANEL             = 'https://pubcasefinder.dbcls.jp/aparqlist/api/pcf_download_panel_by_mondo_id';

	const SETTINGS_KEY        = 'VGPSettings',
		  OBJECT_KEY          = 'VGPObject',
		  LANGUAGE_EN         = 'en',
		  LANGUAGE_JA         = 'ja',
		  SETTINGS_KEY_LANG   = 'language',
		  SETTINGS_KEY_SIZE   = 'size',
		  SETTINGS_KEY_TARGET = 'target',
		  SETTINGS_KEY_FILTER = 'filter',
		  SETTINGS_KEY_SIZE_M = 'filter-limit',
		  CLASS_STATUS_INIT   = 'vgp-status-init',
		  CLASS_STATUS_LOADED = 'vgp-status-loaded',
		  CLASS_PANEL_ROW     = 'vgp-panel-row',
		  CLASS_PAGENUM_ROW   = 'vgp-pagenum-row',
		  ID_LOADER           = 'vgp-loader',
		  ID_LOADER_TEXT      = 'vgp-loader-text',
		  ID_CONTENT          = 'vgp-content',
		  ID_CONTENT_TITLE    = 'vgp-content-title',
		  ID_CONTENT_LIST     = 'vgp-content-list',
		  ID_CONTENT_EMPTY    = 'vgp-content-empty',
		  SIZE_ALL = -1,
		  TARGET_ALL   = 'all',
		  TARGET_PANEL = 'panel',
		  TARGET_GENE  = 'gene'
		  ;

	const URL_HASH_SEARCH = {
		[TARGET_ALL]:   URL_GET_ALL_PANEL_ID,
		[TARGET_PANEL]: URL_GET_PANEL_ID_BY_PANEL,
		[TARGET_GENE]:  URL_GET_PANEL_ID_BY_GENE
	};
	

	var DEFAULT_SETTINGS = {
		[SETTINGS_KEY_SIZE]:   50, // panel data per page
		[SETTINGS_KEY_SIZE_M]: 50, // maximum panel data 
		[SETTINGS_KEY_TARGET]: TARGET_ALL, // TARGET_ALL or TARGET_PANEL or TARGET_GENE
		[SETTINGS_KEY_FILTER]: '', // filter string
		[SETTINGS_KEY_LANG]:   LANGUAGE_EN
		
	};
	
	var _isFunction = function(value) {	return $.isFunction(value);	},
	_isArray = function(value) {return $.isArray(value);},
	_isEmpty = function(value, allowEmptyString) {
		return (value === null) || (value === undefined) || (!allowEmptyString ? value === '' : false) || (_isArray(value) && value.length === 0);
	},
	_isDefined = function(value) {return typeof value !== 'undefined';},
	_parseJson= function(text) {
		var json_data = null;
		try {
			json_data = JSON.parse(text);
		} catch (d) {}
		return json_data;
	}
	;
	
	var methods = {
		
		init: function(options) {
			let settings = $.extend(true,{}, DEFAULT_SETTINGS, options || {});
			return this.each(function () {
				$(this).data(SETTINGS_KEY, settings);
				$(this).data(OBJECT_KEY, new $.VisualGenePanelList(this));
			});
		},
		search_panels: function(options){
			let old_settings = this.data(SETTINGS_KEY);
			let settings = $.extend(true,{}, old_settings, options || {});
			$(this).data(SETTINGS_KEY, settings);
			this.data(OBJECT_KEY).search_panels();
			return this;
		}
	};
	
	$.fn.visual_gene_panel_list = function (method) {
		if (methods[method]) {
			return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
		} else {
			return methods.init.apply(this, arguments);
		}
	};
	
	$.VisualGenePanelList = function (root_panel) {
		
		var $root_panel = $(root_panel);
		
		//var current_settings = $root_panel.data(SETTINGS_KEY);
		
		var search_idlist_cache = {
			[TARGET_ALL]:   null,
			[TARGET_PANEL]: {},
			[TARGET_GENE]:  {}
		};
		function _get_idlist_from_cache(target,filter){
			if(target === TARGET_ALL || _isEmpty(filter)){
				return search_idlist_cache[TARGET_ALL];
			}else{
				if(filter in search_idlist_cache[target]){
					return search_idlist_cache[target][filter];
				}else{
					return null;
				}
			}
		}
		function _store_idlist_to_cache(target,filter,idlist){
			if(target === TARGET_ALL || _isEmpty(filter)){
				search_idlist_cache[TARGET_ALL] = idlist;
			}else{
				search_idlist_cache[target][filter] = idlist;
			}
		}
		

		var panel_cache = {};
		function _get_panel_data_from_cache(panel_id){
			let ret=null;
			if(panel_id in panel_cache){
				ret = panel_cache[panel_id];
			}
			return ret;
		}
		function _store_panel_data_to_cache(json_data){
			$.extend(panel_cache, json_data);
		}
		function _get_uncached_panel_list(selected_idlist){
			let ret=[];
			for(let i=0;i<selected_idlist.length; i++){
				if(!(selected_idlist[i] in panel_cache)){
					ret.push(selected_idlist[i]);
				}
			}
			return ret;
		}
		
		
		//
		// construct UI
		//
		// UI:loader
		var $div_loader = $('<div>').attr('id', ID_LOADER).appendTo($root_panel);
		var $div_loader_wrapper = $('<div>').addClass("d-flex flex-row vgp-loader-content").appendTo($div_loader);
		$('<span>').addClass("vgp-loader-gif").appendTo($div_loader_wrapper);
		$('<span>').addClass("vgp-loader-text").appendTo($div_loader_wrapper);
		function _show_loader(){
			if($('#'+ ID_LOADER).is(":visible") === false)	$('#'+ID_LOADER).show();
		};
		function _hide_loader(){
			if($('#'+ID_LOADER).is(":visible")) $("#"+ID_LOADER).hide();
		};

		// UI: content wrapper
		var $div_content = $('<div>').attr('id', ID_CONTENT).addClass('').appendTo($root_panel);
		function _show_content(){
			if($('#'+ ID_CONTENT).is(":visible") === false) $('#'+ID_CONTENT).show();
		};
		function _hide_content(){
			if($('#'+ID_CONTENT).is(":visible")) $("#"+ID_CONTENT).hide();
		};
		function _init_content(){
			$div_content_list.empty();
			$div_content_list.removeClass(CLASS_STATUS_LOADED).removeClass(CLASS_STATUS_INIT).addClass(CLASS_STATUS_INIT);
			_show_content_empty();
		}
		function _set_content_loaded(){
			$div_content_list.removeClass(CLASS_STATUS_LOADED).addClass(CLASS_STATUS_LOADED);
		}
		function _is_content_init(){
			return $div_content_list.hasClass(CLASS_STATUS_INIT);
		}
		function _is_content_loaded(){
			return $div_content_list.hasClass(CLASS_STATUS_LOADED);
		}

		
		// UI: content title 
		var $div_content_title = $('<div>').attr('id',ID_CONTENT_TITLE).addClass('row').appendTo($div_content);
		$('<div>').addClass('col row align-items-center vgp-col-panel').text('Panel').appendTo($div_content_title);
		$('<div>').addClass('vgp-col-download vgp-col-download-title').text('Download').appendTo($div_content_title);
		
		// UI: content data panel 
		var $div_content_list = $('<div>').attr('id',ID_CONTENT_LIST).appendTo($div_content);
		
		$('<div>').attr('id',ID_CONTENT_EMPTY).text('No panels found!').appendTo($div_content);
		function _show_content_empty(){
			if($('#'+ ID_CONTENT_EMPTY).css('display') === 'none') $('#'+ID_CONTENT_EMPTY).fadeIn("normal");
		};
		function _hide_content_empty(){
			if($('#'+ID_CONTENT_EMPTY).css('display') !== 'none') $("#"+ID_CONTENT_EMPTY).fadeOut("slow");
		};
		
		
		function _get_search_id_url(target,filter){
			let ret;
			if(target === TARGET_ALL){
				ret = URL_HASH_SEARCH[target]
			}else{ // target === SETTINGS_KEY_GENE OR SETTINGS_KEY_PANEL
				ret = URL_HASH_SEARCH[target] + '?query=' + filter;
			}
			return ret;
		}
		
		function _show_result(settings){

			if(_is_content_loaded()) return;
			
			let num_per_page = settings[SETTINGS_KEY_SIZE];
			let num_maximum  = settings[SETTINGS_KEY_SIZE_M];
			
			let idlist = _get_idlist_from_cache(settings[SETTINGS_KEY_TARGET], settings[SETTINGS_KEY_FILTER]);
			let total_num = idlist.length;
			
			if(num_per_page === SIZE_ALL){
				num_maximum = total_num;
			}else{
				num_maximum = Math.min(total_num, num_maximum);
			}
			
			let loaded_num  = $div_content_list.find("." + CLASS_PANEL_ROW).length;
			let isFirstLoad = true;
			if(loaded_num > 0){
				 isFirstLoad = false;
			}

			var $last_row = null;
			if(!isFirstLoad){
				let rows = $div_content_list.find("." + CLASS_PANEL_ROW);
				$last_row = $(rows[rows.length-1]);
				
				if(num_per_page !== SIZE_ALL && loaded_num >= num_per_page){
					let $page_row = $('<div>').addClass(CLASS_PAGENUM_ROW).insertAfter($last_row);
					
					let page_num = parseInt(loaded_num/num_per_page, 10);
					
					$("<div>").text("Page " + page_num).appendTo($page_row);

					$last_row = $page_row;
				}
			}

			let i=loaded_num;
			for(; i<num_maximum; i++){
				let panel_id = idlist[i];
				let panel_data = _get_panel_data_from_cache(panel_id);
				if(_isEmpty(panel_data)) continue;
				
				let $tr = $('<div>').addClass(CLASS_PANEL_ROW);
				if($last_row === null){
					//when initialize tab panel
					$tr.appendTo($div_content_list);				
				}else{
					$tr.insertAfter($last_row);
				}
				$last_row = $tr;

				// create row
				let $div_upper = $('<div>').addClass('row ').appendTo($tr);
				let $vgp_panel = $('<div>').addClass('col vgp-col-panel').appendTo($div_upper);
				
				let vgp_name = panel_data.name_en;
				if(settings[SETTINGS_KEY_LANG] === LANGUAGE_JA && 'name_ja' in panel_data){
					vgp_name = panel_data.name_ja;
				}
				
				let $div_vgp_name = $('<div>').addClass('d-flex flex-row vgp-name-wrapper').appendTo($vgp_panel);
				
				$('<div>').addClass('vgp-name').text(vgp_name).appendTo($div_vgp_name);
				
				if('synonym' in panel_data && !_isEmpty(panel_data.synonym)){
					let vgp_synonym = panel_data.synonym.split('|');
					let $div_synonym_wrapper = $('<div>').addClass('vgp-synonym-wrapper').appendTo($div_vgp_name);
					$('<span>').addClass('vgp-synonym').text('Also known as').appendTo($div_synonym_wrapper);
				}
				
				if('definition' in panel_data && !_isEmpty(panel_data.definition)){
					let $div_vgp_def = $('<div>').addClass('vgp-def-wrapper').appendTo($vgp_panel);
					let $p = $('<p>').text(panel_data.definition).appendTo($div_vgp_def);
					let href_str = encodeURIComponent(panel_data.definition);
					href_str = "https://translate.google.co.jp/?sl=en&tl=ja&text=" + href_str + "&op=translate&hl=ja";
					$("<a>").text(" >> Translate(Google)").attr( 'href', href_str).attr('target', '_blank').appendTo($p);
				}
				
				let $vgp_download = $('<div>').addClass('vgp-col-download').appendTo($div_upper);
				let $btn = $('<button>').addClass('vgp-download-btn').appendTo($vgp_download);
				let $span = $('<span>').addClass('material-icons').text('save_alt')
						.attr({
							'data-toggle':    'tooltip',
							'data-placement': 'top',
							'title':          'Download this panel'
						})
						.appendTo($btn);

				let $div_lower = $('<div>').appendTo($tr);
				
				$span.tooltip();
			}

			// create show more row 
			if(isFirstLoad){
				// create show more row
			}else{
				
			}

			_set_content_loaded();
		}
		
		function _search_panel_data(settings){
			_hide_content();
			_show_loader();

			let idlist = _get_idlist_from_cache(settings[SETTINGS_KEY_TARGET], settings[SETTINGS_KEY_FILTER]);
			
			// find uncached ids
			let selected_idlist;
			if(settings[SETTINGS_KEY_SIZE] === SIZE_ALL){
				selected_idlist = idlist;
			}else{
				selected_idlist = [];
				for(let i=0; i<idlist.length && i<settings[SETTINGS_KEY_SIZE_M]; i++){
					selected_idlist.push(idlist[i]);
				}
			}
			
			let uncached_idlist = _get_uncached_panel_list(selected_idlist);
			if(_isEmpty(uncached_idlist)){
				_hide_loader();
				_show_content();
				_show_result(settings);
				return;
			}
			
			let url_str = URL_GET_PANEL_DATA_BY_PANEL_ID + '?mondo_id=' + encodeURIComponent(uncached_idlist.join(',').replace(/MONDO:/g, ''));
			_run_ajax(url_str,'GET', null, 'text', true, 
				function(data){
					let obj = _parseJson(data);
					let hash = {};
					for(let j=0;j<obj.length; j++){
						let panel_id = obj[j].mondo_id;
						hash[panel_id] = obj[j];
					}
					_store_panel_data_to_cache(hash);
					_hide_loader();
					_show_content();
					_show_result(settings);
					return;
				},
				function(){
					_hide_loader();
					_show_content();
					return;
				}
			);

			
			
			
		}
		
		
		function _search_idlist(settings){
			
			_hide_content();
			_show_loader();
			
			// search id
			let idlist = _get_idlist_from_cache(settings[SETTINGS_KEY_TARGET], settings[SETTINGS_KEY_FILTER]);

			// search panel data
			if(!_isEmpty(idlist)){
				_search_panel_data(settings);
				return;
			}

			// do search idlist
			let url_str = _get_search_id_url(settings[SETTINGS_KEY_TARGET], settings[SETTINGS_KEY_FILTER]);
			_run_ajax(url_str,'GET', null, 'text', true, 
				function(data){
					_store_idlist_to_cache(settings[SETTINGS_KEY_TARGET], settings[SETTINGS_KEY_FILTER], _parseJson(data))
					_search_panel_data(settings);
					return;
				},
				function(){
					_hide_loader();
					_show_content();
					return;
				}
			);
		}
		

		function _run_ajax(url_str,http_type,post_data,response_dataType,async,callback,callback_fail){

			if(http_type==="GET"){
				$.ajax({	
					url:      url_str,  // 通信先のURL
					type:     http_type,// 使用するHTTPメソッド(get/post)
					async:    async,    // 使用するHTTPメソッド(true/false)
					dataType: response_dataType
					//timeout:  3000,
				}).done(function(data1,textStatus,jqXHR) {
					if(_isFunction(callback))callback(data1);
				}).fail(function(jqXHR, textStatus, errorThrown ) {
					//alert('Server access error:' + textStatus + ":" + errorThrown + '\nURL: ' + url_str);
					if(_isFunction(callback_fail)) callback_fail();
					alert('Server access error:' + textStatus + ":" + errorThrown + '\nURL: ' + url_str);
				});
			}else{
				$.ajax({
					url:      url_str,  // 通信先のURL
					type:     http_type,// 使用するHTTPメソッド(get/post)
					async:    async,    // 使用するHTTPメソッド(true/false)
					data:     post_data,
					proccessData: false, 
					dataType: response_dataType
				}).done(function(data1,textStatus,jqXHR) {
					if(_isFunction(callback))callback(data1);
				}).fail(function(jqXHR, textStatus, errorThrown ) {
					//alert('Server access error:' + textStatus + ":" + errorThrown + '\nURL: ' + url_str);
					if(_isFunction(callback_fail)) callback_fail();
					alert('Server access error:' + textStatus + ":" + errorThrown + '\nURL: ' + url_str);
				});
			}
		}
		
		
		this.search_panels = function(){
			var current_settings = $root_panel.data(SETTINGS_KEY);
			_search_idlist(current_settings);
		};
	};


}(jQuery));
